#include <Adafruit_NeoPixel.h>
#ifdef __AVR__  
  #include <avr/power.h>
#endif

#define PIN 8
#define NUMPIXELS 60

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(60, 8, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel strip = Adafruit_NeoPixel(60, 8, NEO_GRB + NEO_KHZ800);


void setup() {
 pixels.begin(); 
 strip.begin();
 strip.setBrightness(255);
 strip.show();
}

void loop() {
    rainbowCycle(100);
}

void verfolgung(int freq, int red,int green, int blue){         //Sieht besonders cool bei freq>200 aus. 
  for(int i=0;i<NUMPIXELS;i++){
    pixels.setPixelColor(i, pixels.Color(red,green,blue)); 
    pixels.show();
    delay(2000/freq);
  }
for(int i=0;i<NUMPIXELS;i++){
    // pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
    pixels.setPixelColor(i, pixels.Color(0,0,0)); // Moderately bright green color.
    pixels.show(); // This sends the updated pixel color to the hardware.
    delay(2000/freq); // Delay for a period of time (in milliseconds).
  }
}

void glow(int red,int green,int blue){    // Hellt langsam in der durch RGB-Werte gegebenen Farbe auf und dunkelt danach langsam wieder ab.
  int rot=0;
  int gruen=0;
  int blau=0;
  int abdunkeln=0;
while(abdunkeln==0){
allepixel(rot, gruen, blau);
if((rot<red) || (gruen<green) || (blau<blue)){
  if(rot<red){
    rot++;
  }
  if(gruen<green){
    gruen++;
  }
  if(blau<blue){
    blau++;
  }
}
else if((rot==red) && (gruen==green) && (blau==blue)){
  abdunkeln = 1;
}}

delayMicroseconds(1);

while(abdunkeln==1){
  allepixel(rot,gruen,blau);
  if(rot>0){
    rot--;
  }
  if(gruen>0){
    gruen--;
  }
  if(blau>0){
    blau--;
  }
  delayMicroseconds(1);
  if((rot==0) && (gruen==0) && (blau==0)){
    abdunkeln=0;
  }
}
}

void allepixel(int rot, int gruen, int blau){
  for(int i=0;i<NUMPIXELS;i++){
      pixels.setPixelColor(i, pixels.Color(rot,gruen,blau)); 
      pixels.show(); 
  }
}

void colorWipe(uint32_t c, uint8_t wait) { // Füllt die Kette einer nach dem anderen mit einer Farbe auf. 
  for(uint16_t i=0; i<strip.numPixels(); i++) { // Bsp.: colorWipe(strip.Color(255, 0, 0), 50);
    strip.setPixelColor(i, c);
    strip.show();
    delay(wait);
  }
}

void rainbow(uint8_t wait) {    // Alle Pixel zeigen gleichzeitig dieselbe wechselnde Farbe an.
  uint16_t i, j;

  for(j=0; j<256; j++) {
    for(i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel((i+j) & 255));
    }
    strip.show();
    delay(wait);
  }
}

uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}

void theaterChaseRainbow(uint8_t wait) {  //Lichter laufen im Uhrzeigersinn und verändern dabei ihre Farbe.
  for (int j=0; j < 256; j++) {     // cycle all 256 colors in the wheel
    for (int q=0; q < 3; q++) {
      for (uint16_t i=0; i < strip.numPixels(); i=i+3) {
        strip.setPixelColor(i+q, Wheel( (i+j) % 255));    //turn every third pixel on
      }
      strip.show();

      delay(wait);

      for (uint16_t i=0; i < strip.numPixels(); i=i+3) {
        strip.setPixelColor(i+q, 0);        //turn every third pixel off
      }
    }
  }
}

void rainbowCycle(uint8_t wait) {  // Regenbogen, der gegen den Uhrzeigersinn läuft.
  uint16_t i, j;

  for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
    for(i=0; i< strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}
